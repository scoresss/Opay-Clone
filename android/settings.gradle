// Full code for android/settings.gradle (Standard Flutter Setup)
pluginManagement {
    // Essential for Gradle to find Flutter's own plugins (like dev.flutter.flutter-gradle-plugin)
    // by including Flutter's internal Gradle components as build sources.
    def flutterSdkPath = System.getenv("FLUTTER_SDK_PATH")
    if (flutterSdkPath == null) {
        flutterSdkPath = System.getProperty("flutter.sdk")
    }
    // This assert helps ensure the SDK path is found during CI builds
    assert flutterSdkPath != null, "FLUTTER_SDK_PATH not set; property flutter.sdk not set; " +
            "you must set flutter.sdk in gradle.properties or flutter.sdk environment variable"

    // Include Flutter's internal Gradle daemon and tools as build sources
    includeBuild("$flutterSdkPath/.gradle/daemon")
    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal() // For standard Gradle plugins
    }

    // Define the plugins used in your project and their versions.
    // 'apply false' means these plugins are defined here but applied in individual modules (e.g., app/build.gradle).
    plugins {
        id "dev.flutter.flutter-plugin-apply" version "1.0.0" apply false // The core Flutter plugin
        id "com.android.application" version "8.4.0" apply false // Android Gradle Plugin (matches previous updates)
        id "org.jetbrains.kotlin.android" version "1.9.0" apply false // Kotlin Android Plugin (matches previous updates)
        id "com.google.gms.google-services" version "4.4.1" apply false // Firebase Google Services plugin (matches previous updates)
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "android"
include ':app' // Crucial for including your app module
